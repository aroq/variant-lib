tasks:
  ssh:
    tasks:
      server:
        parameters:
        - name: user
          type: string
          default: ""
        - name: host
          type: string
          default: ""
        - name: project_root_dir
          type: string
          default: ""
        - name: project_subdirectory
          type: string
          default: ""
        script: ssh -v {{.user}}@{{.host}}
  exec:
    parameters:
    - name: ssh.server.project_root_dir
      type: string
      default: ""
    - name: ssh.server.project_subdirectory
      type: string
      default: ""
    - name: ssh.server.user
      type: string
      default: ""
    - name: ssh.server.host
      type: string
      default: ""
    - name: exec_dir
      type: string
      default: ""
    - name: subdir
      type: string
      default: ""
    - name: title
      type: string
      default: ""
    - name: cmd
      type: string
      default: "pwd"
    - name: mode
      type: string
      default: local_current_dir
    - name: sudo_user
      type: string
      default: ""
    - name: verbose
      type: string
      default: "true"
    - name: flags
      type: string
      default: ""
    steps:
    - script: |
        cmd_info () {
          CMD={{list .flags .cmd | join " " | trimSuffix "\n" | quote | replace "\\n" "\n" }}
          CMD_TITLE=${1}
          CMD_DIR=${2:-"$(pwd)"}
          CMD_SSH_HOST=${3:-}
          CMD_SUDO_USER=${4:-}
          if [ -z "${CMD_SSH_HOST}" ]; then
            CMD_SSH_HOST_MESSAGE=''
          else
            CMD_SSH_HOST_MESSAGE=" through SSH on the remote host ${CMD_SSH_HOST}"
          fi
          if [ -z "${CMD_SUDO_USER}" ]; then
            CMD_SUDO_USER_MESSAGE=''
          else
            CMD_SUDO_USER_MESSAGE=" as a sudo user \"${CMD_SUDO_USER}\""
          fi

          if [ "{{.verbose}}" = "true" ]; then
            printf "%s\e[34m---> ${CMD_TITLE} :: Executing command in the directory ${CMD_DIR}${CMD_SSH_HOST_MESSAGE}${CMD_SUDO_USER_MESSAGE} (mode={{.mode}}): \e[0m\n"
          fi

          echo -e "\033[0;32m${CMD}\033[0m"
        }

        if [ "{{ .mode }}" = "ssh" ]; then
          cmd_info "{{.title}}" "{{.exec_dir}}/{{.subdir}}" "{{.ssh.server.user}}@{{.ssh.server.host}}"
          ssh -T {{.ssh.server.user}}@{{.ssh.server.host}} "set -e; cd {{.exec_dir}}/{{.subdir}}; {{.cmd | escapeDoubleQuotes | trimSuffix "\n"}}"
        elif [ "{{ .mode }}" = "ssh_sudo" ]; then
          cmd_info "${{.title}}" "{{.exec_dir}}/{{.subdir}}" "{{.ssh.server.user}}@{{.ssh.server.host}}" "{{.sudo_user}}"
          ssh -T {{.ssh.server.user}}@{{.ssh.server.host}} 'sudo -u {{.sudo_user}} bash -c "set -e; cd {{.exec_dir}}/{{.subdir}}; {{.cmd | escapeDoubleQuotes | trimSuffix "\n"}}"'
        elif [ "{{ .mode }}" = "local_current_dir" ]; then
          cmd_info "{{.title}}"
          set -e;
          {{list .flags .cmd | join " "}}
        elif [ "{{ .mode }}" = "local" ]; then
          cmd_info "{{.title}}" "{{.exec_dir}}/{{.subdir}}"
          set -e;
          cd {{.exec_dir}}/{{.subdir}};
          {{list .flags .cmd | join " "}}
        elif [ "{{ .mode }}" = "gitlab_docker" ]; then
          cmd_info "{{.title}}" "{{.exec_dir}}/{{.subdir}}"
          set -e;
          cd {{.exec_dir}}/{{.subdir}};
          {{list .flags .cmd | join " "}}
        elif [ "{{ .mode }}" = "gitlab_shell" ]; then
          cmd_info "{{.title}}" "{{.exec_dir}}/{{.subdir}}"
          set -e;
          cd {{.exec_dir}}/{{.subdir}};
          {{list .flags .cmd | join " "}}
        else
          printf "\e[31mexec mode is not defined properly\e[0m\n"
        fi

  utils:
    tasks:
      setup:
        tasks:
          keys:
            parameters:
            - name: enabled
              type: string
              default: "false"
            steps:
            - if:
              - script: |
                  if [ "{{ .enabled }}" != "true" ]; then
                    echo Enabled: {{ .enabled }}
                    exit 1
                  fi
                silent: true
              then:
              - task: tools.goofys.mount
              - task: tools.ssh.copy_id_rsa
      artifact:
        parameters:
        - name: version
          type: string
        - name: artifacts_dir
          type: string
          default: artifacts
        - name: artifact_dir
          type: string
          default: master
        tasks:
          git:
            parameters:
            - name: clone_options
              type: string
              default: --single-branch --depth 1 --quiet
            - name: repo
              type: string
            steps:
            - task: exec
              arguments:
                title: "Artifact :: Git {{.version}}"
                cmd: |
                  mkdir -p {{.artifacts_dir}}
                  rm -rf {{.artifacts_dir}}/{{.artifact_dir}}
                  git clone -b {{.version}} {{.clone_options}} {{.repo}} {{.artifacts_dir}}/{{.artifact_dir}} &> /dev/null
                  tar -czf {{.artifact_dir}}.tar.gz -C {{.artifacts_dir}}/{{.artifact_dir}} .
                  rm -rf {{.artifacts_dir}}

  tools:
    tasks:
      lh:
        parameters:
        - name: URL
          type: string
          default: ""
        - name: DOMAIN
          type: string
          default: ""
        - name: PROTOCOL
          type: string
          default: "https://"
        - name: USER_NAME
          type: string
          default: ""
        - name: USER_PASS
          type: string
          default: ""
        - name: AUTH
          type: string
          default: ""
        - name: AUTH_URL
          type: string
          default: ""
        - name: EXTRA_HEADERS
          type: string
          default: ""
        - name: EMULATED_FORM_FACTOR
          type: string
          default: ""
        autoenv: true
        steps:
        - script: |
            cd lighthouse
            ./lh
            open reports/report.html
      lighthouse:
        steps:
        - task: tools.lighthouse.init
        - task: tools.lighthouse.clean
        - task: tools.lighthouse.test
        tasks:
          init:
            steps:
            - task: exec
              arguments:
                title: "Lighthouse :: init"
                cmd: |
                  npm install
          clean:
            steps:
            - task: exec
              arguments:
                title: "Lighthouse :: clean"
                cmd: |
                  gulp clean
          test:
            steps:
            - task: exec
              arguments:
                title: "Lighthouse :: test"
                cmd: |
                  gulp
          params:
            script: |
              cat <<YAML
              - PROTOCOL
              - DOMAIN
              - URL
              - USER_NAME
              - USER_PASS
              - AUTH
              - AUTH_URL
              - EXTRA_HEADERS
              - EMULATED_FORM_FACTOR
          docker:
            tasks:
            parameters:
            - name: tools.lighthouse.params
              type: object
            steps:
            - task: tools.docker.variant
              arguments:
                cmd: tools lighthouse
                image: michaeltigr/zebra-lighthouse:fedora-latest
                env_vars: '-e {{ get "tools.lighthouse.params" | join " -e " }}'
      ssh:
        tasks:
          copy_id_rsa:
            parameters:
            - name: source_key_path
              type: string
              default: "/root/.secrets/.ssh"
            - name: target_key_path
              type: string
              default: "/root/.ssh"
            - name: source_key_name
              type: string
              default: "id_rsa"
            - name: target_key_name
              type: string
              default: "id_rsa"
            script: |
              echo "---> SSH :: Copy id_rsa key"
              cp -fR {{.source_key_path}}/{{.source_key_name}} {{.target_key_path}}/{{.target_key_name}}
      git:
        parameters:
        - name: repo
          type: string
        - name: branch
          type: string
        tasks:
          config:
            tasks:
              identity:
                parameters:
                - name: name
                  type: string
                  default: "Zebra Project"
                - name: email
                  type: string
                  default: "zebraproject@adyax.com"
                steps:
                - task: exec
                  arguments:
                    title: "Git :: config"
                    cmd: |
                      git config --list | grep user\.name  || git config --global user.name "{{.name}}"
                      git config --list | grep user\.email || git config --global user.email "{{.email}}"
          init:
            steps:
            - task: exec
              arguments:
                title: "Git :: init"
                cmd: |
                  git init .
                  git remote rm origin || true
                  git remote add -t {{.branch}} -f origin  {{.repo}}
          pull:
            steps:
            - task: exec
              arguments:
                title: "Git :: pull"
                cmd: |
                  git checkout {{.branch}}
                  git reset --hard origin/{{.branch}}
                  git pull origin {{.branch}}

      composer:
        tasks:
          install:
            parameters:
            - name: flags
              type: string
              default: "--prefer-dist --optimize-autoloader"
            steps:
            - task: exec
              arguments:
                title: "Composer :: Install"
                cmd: composer install {{.flags}}

      docman:
        parameters:
        - name: executable
          type: string
          default: docman
        - name: repo
          type: string
        - name: branch
          type: string
        - name: state
          type: string
        - name: config
          type: string
        - name: dir
          type: string
          default: docman
        tasks:
          init:
            steps:
            - task: exec
              arguments:
                title: "Docman :: Init"
                cmd: |
                  rm -fR {{.dir}}
                  {{.executable}} init docman {{.repo}} --branch={{.branch}}
          info:
            steps:
            - task: exec
              arguments:
                title: "Docman :: Info"
                cmd: |
                  cd {{.dir}}
                  {{.executable}} info full config.json
          build:
            steps:
            - task: exec
              arguments:
                title: "Docman :: Build {{.state}}"
                cmd: |
                  cd {{.dir}}
                  {{.executable}} build git_target
            tasks:
              stable:
                steps:
                - task: tools.docman.build
                  arguments:
                    state: stable

      ansible:
        parameters:
        - name: ansible_dir
          type: string
          default: ansible
        - name: ansible_config_file
          type: string
          default: ansible.cfg
        tasks:
          playbook:
            parameters:
            - name: title
              type: string
              default: "Ansible playbook"
            - name: executable
              type: string
              default: ansible-playbook
            - name: playbook
              type: string
            - name: inventory_file
              type: string
            - name: vars
              type: string
              default: "{}"
            steps:
            - task: exec
              arguments:
                title: "{{.title}}"
                cmd: |
                  cd {{.ansible_dir}}
                  ANSIBLE_CONFIG='{{.ansible_config_file}}' \
                  {{.executable}} {{.playbook}} -i {{.inventory_file}} \
                  -e '{{.vars}}'
      ansistrano:
        parameters:
        - name: user
          type: string
        - name: host
          type: string
        - name: ansistrano_deploy_to
          type: string
        - name: ansistrano_deploy_from
          type: string
          default: "../master.tar.gz"
        - name: deploy_environment
          type: string
        - name: ansistrano_deploy_via
          type: string
          default: copy_unarchive
        tasks:
          deploy:
            steps:
            - task: tools.ansible.playbook
              arguments:
                title: "Ansistrano deploy {{.deploy_environment}}"
                playbook: "deployWithAnsistrano.yml"
                inventory_file: "{{.deploy_environment}}.inventory.yaml"
                vars: '{"user":"{{.user}}","host":"{{.host}}","ansistrano_deploy_to":"{{.ansistrano_deploy_to}}","ansistrano_deploy_from":"{{.ansistrano_deploy_from}}","deploy_environment":"{{.deploy_environment}}","ansistrano_deploy_via":"{{.ansistrano_deploy_via}}"}'

      goofys:
        tasks:
          mount:
            inputs:
            - name: mount_point
              type: string
              default: "/root/.secrets"
            - name: bucket
              type: string
              default: ""
            - name: mode
              type: string
              default: "0600"

            script: |
              echo "---> Goofys :: Mount bucket"
              if [ -n {{.mount_point}} ]; then
                if [ ! -d {{.mount_point}} ]; then
                  mkdir -p {{.mount_point}}
                  (nohup goofys -f --file-mode={{.mode}} --sse {{.bucket}} {{.mount_point}}) 2>&1 >>/var/log/goofys.log 2>&1 &
                  sleep 5
                fi
              fi

      drupal:
        tasks:
          files:
            parameters:
            - name: ssh.server.project_root_dir
              type: string
              default: ""
            - name: ssh.server.project_subdirectory
            - name: site_dir
              type: string
              default: default
            tasks:
              fix_permissions:
                steps:
                - task: exec
                  arguments:
                    title: "Drupal :: Files :: Fix permissions"
                    cmd: |
                      if [ -d docroot/sites/{{.site_dir}} ]; then chmod 755 docroot/sites/{{.site_dir}}; fi
                      if [ -f docroot/sites/{{.site_dir}}/services.yml ]; then chmod 644 docroot/sites/{{.site_dir}}/services.yml; fi
                      if [ -f docroot/sites/{{.site_dir}}/default.services.yml ]; then chmod 644 docroot/sites/{{.site_dir}}/default.services.yml; fi
                      if [ -f docroot/sites/{{.site_dir}}/settings.php ]; then chmod 644 docroot/sites/{{.site_dir}}/settings.php; fi
                      if [ -f docroot/sites/{{.site_dir}}/default.settings.php ]; then chmod 644 docroot/sites/{{.site_dir}}/default.settings.php; fi
                      if [ -d docroot/sites/{{.site_dir}}/files ]; then chmod 755 docroot/sites/{{.site_dir}}/files; fi
              shared_files_link:
                steps:
                - task: exec
                  arguments:
                    title: "Drupal :: Files :: Shared files link"
                    cmd: |
                      ln -sfn {{.ssh.server.project_root_dir}}/shared/{{.ssh.server.project_subdirectory}}/docroot/sites/{{.site_dir}}/files \
                      {{.ssh.server.project_root_dir}}/current/{{.ssh.server.project_subdirectory}}/docroot/sites/{{.site_dir}}/files
              env_file_link:
                steps:
                - task: exec
                  arguments:
                    title: "Drupal :: Files :: Environment file link"
                    cmd: |
                      ln -sfn {{.ssh.server.project_root_dir}}/shared/{{.ssh.server.project_subdirectory}}/environments/env.settings.php \
                      {{.ssh.server.project_root_dir}}/current/{{.ssh.server.project_subdirectory}}/environments/env.settings.php


      drush:
        parameters:
        - name: site_dir
          type: string
          default: default
        - name: flags
          type: string
          default: ""
        tasks:
          exec:
            parameters:
            - name: title
              type: string
              default: "Drush command"
            - name: cmd
              type: string
            steps:
            - task: exec
              arguments:
                title: "{{.title}}"
                cmd: drush -l {{ .site_dir }} {{.cmd}} -y {{.flags}}
          status:
            steps:
            - task: tools.drush.exec
              arguments:
                title: "Drush :: status"
                cmd: status
                site_dir: "{{.site_dir}}"
                flags: "{{.flags}}"
          config_import:
            steps:
            - task: tools.drush.exec
              arguments:
                title: "Drush :: config:import"
                cmd: config:import
                site_dir: "{{.site_dir}}"
                flags: "{{.flags}}"
          updatedb:
            steps:
            - task: tools.drush.exec
              arguments:
                title: "Drush :: updatedb"
                cmd: updatedb
                site_dir: "{{.site_dir}}"
                flags: "{{.flags}}"
          entity_updates:
            steps:
            - task: tools.drush.exec
              arguments:
                title: "Drush :: entity:updates"
                cmd: entity:updates
                site_dir: "{{.site_dir}}"
                flags: "{{.flags}}"
          cache_rebuild:
            steps:
            - task: tools.drush.exec
              arguments:
                title: "Drush :: cache:rebuild"
                cmd: cache:rebuild
                site_dir: "{{.site_dir}}"
                flags: "{{.flags}}"

      yarn:
        parameters:
        - name: dir
          type: string
        tasks:
          build:
            parameters:
            - name: install_options
              type: string
              default: ""
            - name: target
              type: string
              default: build
            steps:
            - task: exec
              arguments:
                title: "Yarn :: build :: {{.target}}"
                cmd: |
                  cd {{.dir}}
                  yarn{{.install_options}}
                  yarn {{.target}}
            tasks:
              dev:
                steps:
                - task: tools.yarn.build
                  arguments:
                    install_options: " --frozen-lockfile --ignore-optional --non-interactive"

      docker:
        tasks:
          run:
            parameters:
            - name: executable
              type: string
              default: docker
            - name: image
              type: string
            - name: cmd
              type: string
            - name: flags
              type: string
              default: --rm
            - name: shell_prefix
              type: string
              default: /bin/bash -c
            - name: volumes
              type: string
              default: -v "${PWD}:${PWD}"
            - name: working_dir
              type: string
              default: -w ${PWD}
            - name: env_vars
              type: string
              default: ""
            steps:
            - task: exec
              arguments:
                mode: local_current_dir
                cmd: |
                  {{.executable}} run {{.flags}} {{.volumes}} {{.working_dir}} {{.env_vars}} --env-file <(env | grep VARIANT_) {{.image}} {{.shell_prefix}} '{{.cmd}}'
          variant_exec:
            parameters:
            - name: flags
              type: string
              default: 'VARIANT_FLAGS_EXEC_MODE="local_current_dir"'
            - name: executable
              type: string
              default: variant
            - name: cmd
              type: string
            - name: image
              type: string
              default: "michaeltigr/zebra-build-php-drush-tools:0.0.1"
            - name: volumes
              type: string
              default: -v "${PWD}:${PWD}"
            - name: working_dir
              type: string
              default: -w ${PWD}
            - name: env_vars
              type: string
              default: ""
            steps:
            - task: tools.docker.run
              arguments:
                cmd: "{{.flags}} {{.executable}} {{.cmd}}"
                image: "{{.image}}"
                volumes: "{{.volumes}}"
                working_dir: "{{.working_dir}}"
                env_vars: "{{.env_vars}}"
          variant:
            parameters:
            - name: cmd
              type: string
            - name: image
              type: string
              default: "michaeltigr/zebra-build-php-drush-tools:0.0.1"
            - name: flags
              type: string
              default: 'VARIANT_FLAGS_EXEC_MODE="local_current_dir"'
            - name: env_vars
              type: string
              default: ""
            steps:
            - task: tools.docker.variant_exec
              arguments:
                flags: "{{.flags}}"
                cmd: "{{.cmd}}"
                image: "{{.image}}"
                volumes: -v "${PWD}:${PWD}"
                working_dir: -w ${PWD}
                env_vars: "{{.env_vars}}"

  # stages:
    # tasks:
      # init:
        # parameters:
        # - name: tools.general.setup.keys
        # # Actual init would be executed as part of above "parameters" processing.
        # script: echo "Init..."
      # deploy:
        # tasks:
          # direct:
            # tasks:
              # before:
                # tasks:
                  # drupal:
                    # tasks:
                      # site:
                        # parameters:
                        # - name: site_dir
                          # type: string
                          # default: default
                        # steps:
                        # - task: tools.drupal.files.fix_permissions
                          # arguments:
                            # site_dir: '{{.site_dir}}'
              # deliver:
                # steps:
                # - task: tools.git.pull
              # build:
                # tasks:
                  # drupal:
                    # steps:
                    # - task: tools.composer.install
              # after:
                # tasks:
                  # drupal:
                    # tasks:
                      # common:
                        # steps:
                        # - task: tools.drupal.files.env_file_link
                      # site:
                        # parameters:
                        # - name: site_dir
                          # type: string
                          # default: default
                        # steps:
                        # - task: tools.drupal.files.shared_files_link
                          # arguments:
                            # site_dir: '{{.site_dir}}'
                        # - task: tools.drupal.files.fix_permissions
                          # arguments:
                            # site_dir: '{{.site_dir}}'


