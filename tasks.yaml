tasks:
  git:
    parameters:
    - name: git.repo
      type: string
    - name: git.branch
      type: string
    tasks:
      config:
        tasks:
          identity:
            parameters:
            - name: name
              type: string
              default: "Zebra Project"
            - name: email
              type: string
              default: "zebraproject@adyax.com"
            steps:
            - task: exec
              arguments:
                title: "Git :: config"
                cmd: |
                  git config --list | grep user\.name  || git config --global user.name "{{.name}}"
                  git config --list | grep user\.email || git config --global user.email "{{.email}}"
      init:
        steps:
        - task: exec
          arguments:
            title: "Git :: init"
            cmd: |
              git init .
              git remote rm origin || true
              git remote add -t {{.git.branch}} -f origin  {{.git.repo}}
      pull:
        steps:
        - task: exec
          arguments:
            title: "Git :: pull"
            cmd: |
              git checkout {{.git.branch}}
              git reset --hard origin/{{.git.branch}}
              git pull origin {{.git.branch}}

  general:
    tasks:
      setup:
        tasks:
          keys:
            parameters:
            - name: enabled
              type: string
              default: "false"
            steps:
            - if:
              - script: |
                  if [ "{{ .enabled }}" != "true" ]; then
                    echo Enabled: {{ .enabled }}
                    exit 1
                  fi
                silent: true
              then:
              - task: goofys.mount
              - task: ssh.copy_id_rsa

  composer:
    tasks:
      install:
        parameters:
        - name: flags
          type: string
          default: "--prefer-dist --optimize-autoloader"
        steps:
        - task: exec
          arguments:
            title: "Composer :: Install"
            cmd: composer install {{.flags}}

  docman:
    parameters:
    - name: repo
      type: string
    - name: branch
      type: string
    - name: state
      type: string
    - name: config
      type: string
    - name: dir
      type: string
      default: docman
    tasks:
      init:
        steps:
        - task: exec
          arguments:
            title: "Docman :: Init"
            cmd: |
              rm -fR {{.dir}}
              docman init docman {{.repo}} --branch={{.branch}}
      info:
        steps:
        - task: exec
          arguments:
            title: "Docman :: Info"
            cmd: |
              cd {{.dir}}
              docman info full config.json
      build:
        steps:
        - task: exec
          arguments:
            title: "Docman :: Build {{.state}}"
            cmd: |
              cd {{.dir}}
              docman build git_target {{.state}} --config='{{.config}}'

  goofys:
    tasks:
      mount:
        inputs:
        - name: mount_point
          type: string
          default: "/root/.secrets"
        - name: bucket
          type: string
          default: ""
        - name: mode
          type: string
          default: "0600"

        script: |
          echo "---> Goofys :: Mount bucket"
          if [ -n {{.mount_point}} ]; then
            if [ ! -d {{.mount_point}} ]; then
              mkdir -p {{.mount_point}}
              (nohup goofys -f --file-mode={{.mode}} --sse {{.bucket}} {{.mount_point}}) 2>&1 >>/var/log/goofys.log 2>&1 &
              sleep 5
            fi
          fi

  drupal:
    tasks:
      files:
        parameters:
        - name: ssh.server.project_root_dir
        - name: ssh.server.project_subdirectory
        - name: site_dir
          type: string
          default: default
        tasks:
          fix_permissions:
            steps:
            - task: exec
              arguments:
                title: "Drupal :: Files :: Fix permissions"
                cmd: |
                  if [ -d docroot/sites/{{.site_dir}} ]; then chmod 755 docroot/sites/{{.site_dir}}; fi && \
                  if [ -f docroot/sites/{{.site_dir}}/services.yml ]; then chmod 644 docroot/sites/{{.site_dir}}/services.yml; fi && \
                  if [ -f docroot/sites/{{.site_dir}}/default.services.yml ]; then chmod 644 docroot/sites/{{.site_dir}}/default.services.yml; fi && \
                  if [ -f docroot/sites/{{.site_dir}}/settings.php ]; then chmod 644 docroot/sites/{{.site_dir}}/settings.php; fi && \
                  if [ -f docroot/sites/{{.site_dir}}/default.settings.php ]; then chmod 644 docroot/sites/{{.site_dir}}/default.settings.php; fi && \
                  if [ -d docroot/sites/{{.site_dir}}/files ]; then chmod 755 docroot/sites/{{.site_dir}}/files; fi
          shared_files_link:
            steps:
            - task: exec
              arguments:
                title: "Drupal :: Files :: Shared files link"
                cmd: |
                  ln -sfn {{.ssh.server.project_root_dir}}/shared/{{.ssh.server.project_subdirectory}}/docroot/sites/{{.site_dir}}/files \
                  {{.ssh.server.project_root_dir}}/current/{{.ssh.server.project_subdirectory}}/docroot/sites/{{.site_dir}}/files
          env_file_link:
            steps:
            - task: exec
              arguments:
                title: "Drupal :: Files :: Environment file link"
                cmd: |
                  ln -sfn {{.ssh.server.project_root_dir}}/shared/{{.ssh.server.project_subdirectory}}/environments/env.settings.php \
                  {{.ssh.server.project_root_dir}}/current/{{.ssh.server.project_subdirectory}}/environments/env.settings.php

  ssh:
    parameters:
    - name: ssh.server.project_root_dir
      type: string
    - name: ssh.server.project_subdirectory
      type: string
    - name: ssh.server.user
      type: string
    - name: ssh.server.host
      type: string
    tasks:
      copy_id_rsa:
        parameters:
        - name: source_key_path
          type: string
          default: "/root/.secrets/.ssh"
        - name: target_key_path
          type: string
          default: "/root/.ssh"
        - name: source_key_name
          type: string
          default: "id_rsa"
        - name: target_key_name
          type: string
          default: "id_rsa"
        script: |
          echo "---> SSH :: Copy id_rsa key"
          cp -fR {{.source_key_path}}/{{.source_key_name}} {{.target_key_path}}/{{.target_key_name}}
      # Deprecated, use "exec" instead of "exec"
      exec:
        parameters:
        - name: exec_dir
          type: string
        - name: subdir
          type: string
          default: ""
        - name: title
          type: string
          default: ""
        - name: cmd
          type: string
          default: "pwd"
        script: |
          echo "---> {{.title}} :: Executing command: \"set -e; cd {{.exec_dir}}/{{.subdir}}; {{.cmd}}\" through SSH on remote host: {{.ssh.server.user}}@{{.ssh.server.host}}"
          ssh -T {{.ssh.server.user}}@{{.ssh.server.host}} "set -e; cd {{.exec_dir}}/{{.subdir}}; {{.cmd}}"
  exec:
    parameters:
    - name: ssh.server.project_root_dir
      type: string
    - name: ssh.server.project_subdirectory
      type: string
    - name: ssh.server.user
      type: string
    - name: ssh.server.host
      type: string
    - name: exec_dir
      type: string
    - name: subdir
      type: string
      default: ""
    - name: title
      type: string
      default: ""
    - name: cmd
      type: string
      default: "pwd"
    - name: mode
      type: string
      # Possible values: "ssh", "local".
      default: local
    - name: sudo_user
      type: string
    - name: verbose
      type: string
      default: "true"
    script: |
      cmd_info () {
        CMD_TITLE=${1}
        CMD_DIR=${2:-"$(pwd)"}
        CMD_SSH_HOST=${3:-}
        CMD_SUDO_USER=${4:-}
        CMD={{get "cmd" | quote}}
        if [ -z "${CMD_SSH_HOST}" ]; then
          CMD_SSH_HOST_MESSAGE=''
        else
          CMD_SSH_HOST_MESSAGE=" through SSH on the remote host ${CMD_SSH_HOST}"
        fi
        if [ -z "${CMD_SUDO_USER}" ]; then
          CMD_SUDO_USER_MESSAGE=''
        else
          CMD_SUDO_USER_MESSAGE=" as a sudo user \"${CMD_SUDO_USER}\""
        fi

        if [ "{{.verbose}}" = "true" ]; then
          printf "%s\e[34m---> ${CMD_TITLE} :: Executing command in the directory ${CMD_DIR}${CMD_SSH_HOST_MESSAGE}${CMD_SUDO_USER_MESSAGE} (mode={{.mode}}): \e[0m\n"
          echo -e "\033[0;32m${CMD}\033[0m"
        fi
      }

      if [ "{{ .mode }}" = "ssh" ]; then
        cmd_info "{{.title}}" "{{.exec_dir}}/{{.subdir}}" "{{.ssh.server.user}}@{{.ssh.server.host}}"
        ssh -T {{.ssh.server.user}}@{{.ssh.server.host}} "set -e; cd {{.exec_dir}}/{{.subdir}}; {{.cmd}}"
      elif [ "{{ .mode }}" = "ssh_sudo" ]; then
        cmd_info "{{.title}}" "{{.exec_dir}}/{{.subdir}}" "{{.ssh.server.user}}@{{.ssh.server.host}}" "{{.sudo_user}}"
        ssh -T {{.ssh.server.user}}@{{.ssh.server.host}} "sudo -u {{.sudo_user}} bash -c 'set -e; cd {{.exec_dir}}/{{.subdir}}; {{.cmd}}'"
      elif [ "{{ .mode }}" = "local_current_dir" ]; then
        cmd_info "{{.title}}"
        set -e;
        {{.cmd}}
      elif [ "{{ .mode }}" = "local" ]; then
        cmd_info "{{.title}}" "{{.exec_dir}}/{{.subdir}};"
        set -e;
        cd {{.exec_dir}}/{{.subdir}};
        {{.cmd}}
      elif [ "{{ .mode }}" = "gitlab_docker" ]; then
        cmd_info "{{.title}}" "{{.exec_dir}}/{{.subdir}};"
        set -e;
        cd {{.exec_dir}}/{{.subdir}};
        {{.cmd}}
      elif [ "{{ .mode }}" = "gitlab_shell" ]; then
        cmd_info "{{.title}}" "{{.exec_dir}}/{{.subdir}};"
        set -e;
        cd {{.exec_dir}}/{{.subdir}};
        {{.cmd}}
      else
        printf "\e[31mexec mode is not defined properly\e[0m\n"
      fi

  drush:
    parameters:
    - name: site_dir
      type: string
      default: default
    - name: flags
      type: string
      default: ""
    tasks:
      exec:
        parameters:
        - name: title
          type: string
          default: "Drush command"
        - name: cmd
          type: string
        steps:
        - task: exec
          arguments:
            title: "{{.title}}"
            cmd: drush -l {{ .site_dir }} {{.cmd}} -y {{.flags}}
      status:
        steps:
        - task: drush.exec
          arguments:
            title: "Drush :: status"
            cmd: status
            site_dir: "{{.site_dir}}"
            flags: "{{.flags}}"
      config_import:
        steps:
        - task: drush.exec
          arguments:
            title: "Drush :: config:import"
            cmd: config:import
            site_dir: "{{.site_dir}}"
            flags: "{{.flags}}"
      updatedb:
        steps:
        - task: drush.exec
          arguments:
            title: "Drush :: updatedb"
            cmd: updatedb
            site_dir: "{{.site_dir}}"
            flags: "{{.flags}}"
      entity_updates:
        steps:
        - task: drush.exec
          arguments:
            title: "Drush :: entity:updates"
            cmd: entity:updates
            site_dir: "{{.site_dir}}"
            flags: "{{.flags}}"
      cache_rebuild:
        steps:
        - task: drush.exec
          arguments:
            title: "Drush :: cache:rebuild"
            cmd: cache:rebuild
            site_dir: "{{.site_dir}}"
            flags: "{{.flags}}"

  stages:
    tasks:
      init:
        parameters:
        - name: general.setup.keys
        # Actual init would be executed as part of above "parameters" processing.
        script: echo "Init..."
      deploy:
        tasks:
          direct:
            tasks:
              before:
                tasks:
                  drupal:
                    tasks:
                      site:
                        parameters:
                        - name: site_dir
                          type: string
                          default: default
                        steps:
                        - task: drupal.files.fix_permissions
                          arguments:
                            site_dir: '{{.site_dir}}'
              deliver:
                steps:
                - task: git.pull
              build:
                tasks:
                  drupal:
                    steps:
                    - task: composer.install
              after:
                tasks:
                  drupal:
                    tasks:
                      common:
                        steps:
                        - task: drupal.files.env_file_link
                      site:
                        parameters:
                        - name: site_dir
                          type: string
                          default: default
                        steps:
                        - task: drupal.files.shared_files_link
                          arguments:
                            site_dir: '{{.site_dir}}'
                        - task: drupal.files.fix_permissions
                          arguments:
                            site_dir: '{{.site_dir}}'
