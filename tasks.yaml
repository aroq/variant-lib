# Register parameters so tasks can use them as parameters and make them available as CLI arguments.
parameters:
- name: git.name
  type: string
- name: git.email
  type: string
- name: git.repo
  type: string
- name: git.branch
  type: string
- name: docman.repo
  type: string
- name: docman.branch
  type: string
- name: docman.build.state
  type: string
- name: docman.build.config
  type: string
  default: "{}"
- name: artifact.git.release
  type: string
- name: artifact.git.repo
  type: string
- name: ansible.deploy.vars
  type: string
  default: "{}"
- name: ssh.server.project_root_dir
  type: string
- name: ssh.server.project_subdirectory
  type: string
- name: ssh.server.user
  type: string
- name: ssh.server.host
  type: string
- name: goofys.mount.mount_point
  type: string
- name: goofys.mount.bucket
  type: string

tasks:
  git:
    tasks:
      config:
        script: |
          git config --global user.name "{{.git.name}}"
          git config --global user.email "{{.git.email}}"
      init:
        script: |
          cat <<EOF
          git init .
          git remote rm origin || true
          git remote add -t {{.git.branch}} -f origin  {{.git.repo}}
          EOF
      pull:
        script: |
          cat <<EOF
          git checkout {{.git.branch}}
          git reset --hard origin/{{.git.branch}}
          git pull origin {{.git.branch}}
          EOF

  general:
    tasks:
      source_key_path:
        script: |
          if [ -n {{.goofys.mount.mount_point}} ]; then
            echo {{.goofys.mount.mount_point}}/.ssh
          fi
      setup:
        tasks:
          keys:
            inputs:
              - name: general.source_key_path
            steps:
            - task: goofys.mount
            - task: ssh.copy_id_rsa
              arguments:
                source_key_path: '{{.general.source_key_path}}'

  composer:
    tasks:
      install:
        script: |
          cat <<EOF
          composer install --prefer-dist --optimize-autoloader
          EOF

  goofys:
    tasks:
      mount:
        inputs:
        - name: mount_point
          type: string
          default: "/root/.secrets"
        - name: bucket
          type: string
          default: ""
        - name: mode
          type: string
          default: "0600"

        script: |
          echo "---> Goofys :: Mount bucket"
          if [ -n {{.goofys.mount.mount_point}} ]; then
            if [ ! -d {{.mount_point}} ]; then
              mkdir -p {{.mount_point}}
              (nohup goofys -f --file-mode={{.mode}} --sse {{.bucket}} {{.mount_point}}) 2>&1 >>/var/log/goofys.log 2>&1 &
              sleep 5
            fi
          fi

  drupal:
    tasks:
      files:
        tasks:
          fix_permissions:
            script: |
              cat <<EOF
              if [ -d docroot/sites/default ]; then chmod 755 docroot/sites/default; fi && \
              if [ -f docroot/sites/default/services.yml ]; then chmod 644 docroot/sites/default/services.yml; fi && \
              if [ -f docroot/sites/default/default.services.yml ]; then chmod 644 docroot/sites/default/default.services.yml; fi && \
              if [ -f docroot/sites/default/settings.php ]; then chmod 644 docroot/sites/default/settings.php; fi && \
              if [ -f docroot/sites/default/default.settings.php ]; then chmod 644 docroot/sites/default/default.settings.php; fi && \
              if [ -d docroot/sites/default/files ]; then chmod 755 docroot/sites/default/files; fi
              EOF
          shared_files_link:
            script: |
              cat <<EOF
              ln -sfn {{.ssh.server.project_root_dir}}/shared/{{.ssh.server.project_subdirectory}}/docroot/sites/default/files \
              {{.ssh.server.project_root_dir}}/current/{{.ssh.server.project_subdirectory}}/docroot/sites/default/files
              EOF
          env_file_link:
            script: |
              cat <<EOF
              ln -sfn {{.ssh.server.project_root_dir}}/shared/{{.ssh.server.project_subdirectory}}/environments/env.settings.php \
              {{.ssh.server.project_root_dir}}/current/{{.ssh.server.project_subdirectory}}/environments/env.settings.php
              EOF

  docman:
    tasks:
      init:
        script: |
          echo "---> Docman :: Init {{.docman.repo}}"
          rm -fR docman
          docman init docman {{.docman.repo}} --branch={{.docman.branch}}
      info:
        script: |
          echo "---> Docman :: Info"
          cd docman
          docman info full config.json
      build:
        script: |
          echo "---> Docman :: Build {{.docman.build.state}}"
          cd docman
          pwd
          ls -lah
          docman build git_target {{.docman.build.state}} --config="{{.docman.build.config}}"

  artifact:
    tasks:
      git:
        script: |
          echo "---> Artifact :: Git {{.artifact.git.release}}"
          mkdir -p artifacts
          git clone -b {{.artifact.git.release}} --single-branch --depth 1 {{.artifact.git.repo}} artifacts/master
          tar -czf master.tar.gz -C artifacts/master .
          rm -rf artifacts

  ansible:
    tasks:
      deploy:
        script: |
          echo "---> Ansible :: Deploy"
          ANSIBLE_CONFIG="ansible/ansible.cfg" ANSIBLE_SSH_ARGS="-o ControlMaster=auto -o ControlPersist=60s -o ControlPath=/tmp/ansible-ssh-%h-%p-%r -o ForwardAgent=yes" ansible-playbook ansible/deployWithAnsistrano.yml -i ansible/inventory.yaml -e "{{.ansible.deploy.vars}}"

  ssh:
    tasks:
      copy_id_rsa:
        inputs:
        - name: source_key_path
          type: string
          default: ""
        - name: target_key_path
          type: string
          default: "/root/.ssh"
        - name: source_key_name
          type: string
          default: "id_rsa"
        - name: target_key_name
          type: string
          default: "id_rsa"
        script: |
          echo "---> SSH :: Copy id_rsa key"
          cp -fR {{.source_key_path}}/{{.source_key_name}} {{.target_key_path}}/{{.target_key_name}}

      exec:
        inputs:
        - name: exec_dir
          type: string
        - name: exec_dir_suffix
          type: string
          default: ""
        - name: title
          type: string
          default: ""
        - name: cmd
          type: string
          default: "pwd"
        script: |
          echo "---> {{.title}} :: Executing command: \"set -e; cd {{.exec_dir}}/{{.exec_dir_suffix}}; {{.cmd}}\" through SSH on remote host: {{.ssh.server.user}}@{{.ssh.server.host}}"
          ssh -T {{.ssh.server.user}}@{{.ssh.server.host}} "set -e; cd {{.exec_dir}}/{{.exec_dir_suffix}}; {{.cmd}}"

  stages:
    tasks:
      dev:
        # Register parameters (in fact other tasks with the same name) so they can by used as tasks arguments in steps.
        parameters:
        - name: general.setup.keys
        tasks:
          init:
            # Actual init would be executed as part of above "parameters" processing.
            script: echo "Init..."
          deploy:
            parameters:
            - name: git.init
            - name: git.pull
            - name: drupal.files.fix_permissions
            - name: drupal.files.shared_files_link
            - name: drupal.files.env_file_link
            tasks:
              before:
                steps:
                # Example of executing task with dynamic argument from parameter.
                - task: ssh.exec
                  arguments:
                    title: "Status"
                    cmd: |
                      echo "SSH server host: {{.ssh.server.host}}"
                - task: ssh.exec
                  arguments:
                    title: "Drupal :: Files :: Fix permissions"
                    cmd: '{{.drupal.files.fix_permissions}}'
                - task: ssh.exec
                  arguments:
                    title: "Git :: init"
                    cmd: '{{.git.init}}'
              pull:
                steps:
                - task: ssh.exec
                  arguments:
                    title: "Git :: pull"
                    cmd: '{{.git.pull}}'
              build:
                steps:
                - task: ssh.exec
                  arguments:
                    title: "Composer :: install"
                    cmd: composer install --prefer-dist --optimize-autoloader
              after:
                steps:
                - task: ssh.exec
                  arguments:
                    title: "Drupal :: Files :: Shared files link"
                    cmd: '{{.drupal.files.shared_files_link}}'
                - task: ssh.exec
                  arguments:
                    title: "Drupal :: Files :: Environment file link"
                    cmd: '{{.drupal.files.env_file_link}}'
                - task: ssh.exec
                  arguments:
                    title: "Drupal :: Files :: Fix permissions"
                    cmd: '{{.drupal.files.fix_permissions}}'

